<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mskPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anchorX = view_xview[0] + view_wview[0]/2;
anchorY = ystart;
gotoX = x;
gotoY = y;
armLength = 48;
idealDeltaTime = 0;
dtRatio = 0;
spd = 1.5;
var i = instance_create(x,y,objSword);
i.parent = self;
spawnTimer = 0;
grav = 0.125;
yspd = 0;
hp = 5;
iframes = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idealDeltaTime = 1/room_speed*1000000;
dtRatio = delta_time/idealDeltaTime;
iframes--
if(y&lt;ystart)
{
    yspd += grav;
}
else
{
    yspd = 0;
    if(keyboard_check(ord('W'))||keyboard_check(vk_space))
    {
        yspd = -2.5;
    }
}

gotoX = x+(spd*dtRatio*(keyboard_check(ord('D'))-keyboard_check(ord('A'))));
gotoY = clamp(y+yspd*dtRatio,0,ystart);

x = anchorX + lengthdir_x(min(armLength,point_distance(anchorX,anchorY,gotoX,gotoY)),point_direction(anchorX,anchorY,gotoX,gotoY));
y = anchorY + lengthdir_y(min(armLength+5,point_distance(anchorX,anchorY,gotoX,gotoY)),point_direction(anchorX,anchorY,gotoX,gotoY));
if(y-anchorY &gt;= armLength &amp;&amp; yspd &lt; 0)
    yspd -= 0.25;
/*
spawnTimer++;
if(spawnTimer &gt; 120)
{
    spawnTimer = 0;
    enemy = choose(objEnemy,objEnemy,objToughEnemy,objSniperEnemy,objSwooperEnemy,objMoleEnemy)
    spawn = irandom(2)
    if(spawn == 0){
        i = instance_create(view_xview[0], irandom_range(view_yview[0], view_yview[0]+view_hview[0]), enemy)
    } else if(spawn == 1){
        i = instance_create(irandom_range(view_xview[0], view_xview[0]+view_wview[0]), view_yview[0], enemy)
    } else {
        i = instance_create(view_xview[0]+view_wview[0], irandom_range(view_yview[0], view_yview[0]+view_hview[0]), enemy)
    }
}
*/
if(x-mouse_x!=0)
    image_xscale = -sign(x-mouse_x);

if(abs(keyboard_check(ord('D'))-keyboard_check(ord('A'))))
{
    image_index += 0.1*dtRatio;
}
else
{
    image_index = 0;
}

if((place_meeting(x,y,prtEnemy)||place_meeting(x,y,objScythe)||place_meeting(anchorX,anchorY,prtEnemy))&amp;&amp;iframes&lt;=0)
{
    show_debug_message("hit");
    audio_play_sound(sfxHurt,30,false);
    hp--;
    iframes = 150;
    for(var i = 0; i &lt; 4; i++)
    {
        var j = instance_create(hp*8+4,4,objHeartBreak);
        j.image_index = i;
        j.vspeed = -1*(i%2==1);
        j.hspeed = i-1;
    }
    if(hp&lt;=0)
    {
      room_goto(rmResults);
      audio_play_sound(sfxLightning2,50,false);
    }
    with(instance_place(x,y,prtEnemy))
    {
        instance_destroy();
    }
    with(instance_place(anchorX,anchorY,prtEnemy))
    {
        instance_destroy();
    }
    with(prtEnemy)
    {
        stunTimer = 150;
        if(object_index == objBullet)
            instance_destroy();
    }
    with(objWaveController)
    {
        stunTimer = 150;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0;i&lt;hp;i++)
{
    draw_sprite(sprHeart,0,i*8,0);
}
var radius = point_distance(x,y,anchorX,anchorY)
for (var j = 0; j &lt; radius; j++)
{
    var p = j / radius;
    draw_sprite_ext(sprArm, 0, round(x * (1 - p) + anchorX * p), floor(y * (1 - p) + anchorY * p),1,1,point_direction(anchorX,anchorY,x,y),c_white,1);
}
draw_sprite(sprAnchor,0,anchorX,anchorY);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
