<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anchorX = view_xview[0] + view_wview[0]/2;
anchorY = ystart;
armLength = 48;
idealDeltaTime = 0;
dtRatio = 0;
spd = 1.5;
var i = instance_create(x,y,objSword);
i.parent = self;
spawnTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idealDeltaTime = 1/room_speed*1000000
dtRatio = delta_time/idealDeltaTime
x = clamp(x+(spd*dtRatio*(keyboard_check(ord('D'))-keyboard_check(ord('A')))),anchorX-armLength,anchorX+armLength);
//add jumping

spawnTimer++
if(spawnTimer &gt; 120)
{
    spawnTimer = 0;
    enemy = choose(objEnemy,objEnemy,objToughEnemy)
    spawn = irandom(2)
    if(spawn == 0){
        i = instance_create(view_xview[0], irandom_range(view_yview[0], view_yview[0]+view_hview[0]), enemy)
    } else if(spawn == 1){
        i = instance_create(irandom_range(view_xview[0], view_xview[0]+view_wview[0]), view_yview[0], enemy)
    } else {
        i = instance_create(view_xview[0]+view_wview[0], irandom_range(view_yview[0], view_yview[0]+view_hview[0]), enemy)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprAnchor,0,anchorX,anchorY);
var radius = point_distance(x,y,anchorX,anchorY)
for (var j = 0; j &lt; radius; j++)
{
    var p = j / radius;
    draw_sprite_ext(sprArm, 0, round(x * (1 - p) + anchorX * p), floor(y * (1 - p) + anchorY * p),1,1,point_direction(anchorX,anchorY,x,y),c_white,1);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
