<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDeath</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>mskPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isDead = false;
deathTimer = 0;
stunTimer = 0;
hp = 10;
phase = 0;
attackTimer = 0;
hasFired = 0;
iframes = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("death has died")
global.isWin = 1;
room_goto(rmResults)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!isDead)
{
    idealDeltaTime = 1/room_speed*1000000
    dtRatio = delta_time/idealDeltaTime
    if(stunTimer &gt; 0)
    {
        stunTimer-=dtRatio;
        hspeed = 0;
        vspeed = 0;
    }
    if(instance_exists(objPlayer))
    {
        if(stunTimer&lt;=0)
        {
        attackTimer++;
        iframes--;
        if(iframes &gt; 0)
        {
            image_index = 1;
        }
        else
        {
            image_index = 0;
        }
        if(attackTimer == 1)
        {
            show_debug_message(string(phase))
        }
            switch(phase)
            {
                case 0:
                    if(x&gt;view_xview[0] + 32 &amp;&amp; !instance_exists(objScythe))
                    {
                        x-=3*dtRatio;
                    }
                    else if(!hasFired)
                    {
                        var i = instance_create(x,y,objScythe);
                        i.path = pthScytheCCW;
                        hasFired = true;
                    }
                    if(!instance_exists(objScythe)&amp;&amp;hasFired)
                    {
                        attackTimer = 0;
                        phase = choose(1,2)
                        hasFired = false;
                    }
                    break;
                case 1:
                    if(x&lt;view_xview[0]+view_wview[0] - 32 &amp;&amp; !instance_exists(objScythe))
                    {
                        x+=3*dtRatio;
                    }
                    else if(!hasFired)
                    {
                        var i = instance_create(x,y,objScythe);
                        i.path = pthScytheCW;
                        hasFired = true;
                    }
                    if(!instance_exists(objScythe)&amp;&amp;hasFired)
                    {
                        attackTimer = 0;
                        phase = choose(0,2)
                        hasFired = false;
                    }
                    break;
                case 2:
                    if(abs(x-(view_xview[0]+view_wview[0]/2))&gt;2)
                    {
                        x += -3*dtRatio*sign(x-(view_xview[0]+view_wview[0]/2));
                    }
                    else if(hasFired = false)
                    {
                        hasFired = true;
                        attackTimer = 0;
                    }
                    else
                    {
                        if(attackTimer%5=0)
                        {
                            var i = instance_create(x-8,y-16,objBullet);
                            var j = instance_create(x+8,y-16,objBullet);
                            i.direction = attackTimer+180;
                            j.direction = -attackTimer;
                            i.spd = 2;
                            j.spd = 2;
                        }
                        if(attackTimer &gt; 75)
                        {
                            attackTimer = 0;
                            phase = choose(0,1)
                            hasFired = false;
                        }
                    }
            }
        }
        if(instance_exists(objSword) &amp;&amp; iframes &lt;= 0)
        {
            with(objSword)
            {
                if(collision_line(x,y,x+lengthdir_x(24,image_angle),y+lengthdir_y(24,image_angle),other,false,false))
                {
                    if(spd&gt;5)
                    {
                        with(other)
                        {
                            hp--;
                            iframes=120;
                            if(hp&lt;0)
                            {
                                isDead = true;
                                audio_play_sound(sfxLightning,50,false);
                            }
                        }
                    }
                    else
                    {
                        
                    }
                }
            }
        }
    }
}
else
{
    deathTimer++;
    image_alpha = deathTimer/360;
    if(deathTimer&gt;360)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
